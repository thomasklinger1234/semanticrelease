---
name: ci

on:
  workflow_dispatch:
  pull_request_target:
    types: [ labeled, opened, synchronize, reopened, auto_merge_enabled ]
  push:
    branches:
      - main
    paths:
      - "*/**"

permissions:
  issues: write
  pull-requests: write
  contents: write
  security-events: write
  actions: read
  packages: write

env: 
  GIT_SHA: ${{ github.event.pull_request.head.sha || github.sha }}
  
jobs:
  dependency-review:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v3
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@v3
        with:
          comment-summary-in-pr: "true"
          fail-on-severity: low

  ci:
    runs-on: ubuntu-latest
    env: {}
    steps:
      - uses: actions/checkout@v3
      - uses: azure/setup-helm@v3
        with:
          version: v3.10.2
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Helm Lint
        run: |
          HELM_CHARTS="$(ls -d charts/*)"
          HELM_LINT_OPTS=""
          
          for chart in ${HELM_CHARTS}; do
            # helm dependency list $dir 2> /dev/null | tail +2 | head -n -1 | awk '{ print "helm repo add " $1 " " $3 }' | while read cmd; do $cmd; done
            # helm dependency update ${chart}
            # helm dependency build ${chart}
            helm lint ${chart} ${HELM_LINT_OPTIONS}
            # helm package ${chart} --dependency-update --destination .
          done
      - uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
      - name: Go
        run: |
          go mod tidy
          go mod verify
          go test ./...
          go vet ./...
      - name: Docker Build
        run: |
          docker build \
            --rm \
            --label org.opencontainers.image.authors='TheAuthors <the.authors@acme.corp>' \
            --label org.opencontainers.image.vendor='TheAuthors <the.authors@acme.corp>' \
            --label org.opencontainers.image.version='${{ github.sha }}' \
            --label org.opencontainers.image.revision='${{ github.sha }}' \
            --label org.opencontainers.image.source='https://github.com/${{ github.repository }}' \
            -t onbuild:onbuild \
            -f Dockerfile \
            .
      - name: Container Structure Test
        run: |
          docker run \
            --rm \
            --name container-structure-test \
            -v $(pwd)/imagetest.yaml:/imagetest.yaml \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -t gcr.io/gcp-runtimes/container-structure-test:latest \
              test --image onbuild:onbuild --config /imagetest.yaml
      - name: Container Scan via Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'onbuild:onbuild'
          format: 'sarif'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          output: 'trivy-results.sarif'
      - name: CodeQL Upload Trivy Sarif
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - uses: actions/setup-node@v3
        if: github.ref == 'refs/heads/main'
        with:
          node-version: 18
      - name: Prepease Release
        if: github.ref == 'refs/heads/main'
        run: |
          cat << EOF > .releaserc.json 
          {
            "branches": ["main"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              "@semantic-release/changelog",
              [
                "@semantic-release/exec",
                {
                  "prepareCmd": "echo \"\${nextRelease.version}\" > VERSION; mkdir -p release; cp VERSION release/VERSION"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": [
                    "CHANGELOG.md"
                  ]
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    { "path": "release/**", "label": "Release Artifacts" }
                  ]
                }
              ]
            ]
          }
          EOF

          npm install -g \
            semantic-release \
            @semantic-release/changelog \
            @semantic-release/exec \
            @semantic-release/git
      - name: Perform Release
        if: github.ref == 'refs/heads/main'
        run: |
          npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: "shopentrance-bot"
          GIT_AUTHOR_EMAIL: "shozu+bots@otto.de"
          GIT_COMMITTER_NAME: "shopentrance-bot"
          GIT_COMMITTER_EMAIL: "shozu+bots@otto.de"
      - name: Log in to the Container registry (GHCR)
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        if: github.ref == 'refs/heads/main'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Image to Container Registry (GHCR)
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag onbuild:onbuild ghcr.io/${{ github.repository_owner }}/onbuild:$(cat VERSION)
          docker push ghcr.io/${{ github.repository_owner }}/onbuild:$(cat VERSION)